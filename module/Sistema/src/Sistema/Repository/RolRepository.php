<?php

namespace Sistema\Repository;

use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;

/**
 * RolRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RolRepository extends EntityRepository {
	public function addFiltro($qb, $campos, $paginacion) {
		$expr = $qb->expr();
		$andX = $expr->andX();

		foreach ($campos as $key => $value) {
			$qb->andWhere($expr->like('r.' . $key, ':' . $key));
			$qb->setParameter($key, '%' . $value . '%');
		}
		$qb->andWhere($andX);

		if ($paginacion) {
			$qb->setFirstResult($paginacion['inicio']);
			$qb->setMaxResults($paginacion['items']);
		}

		$query = $qb->getQuery();
		return $query;
	}

	public function buscar($campos, $paginacion) {
		$qb = $this->_em->createQueryBuilder();
		$qb->select('r')
		   ->from('Sistema\Entity\Rol', 'r')
		   ->where('r.nrolestado = :nrolestado')
		   ->orderBy('r.crolnombre', 'ASC')
		   ->setParameter('nrolestado', 1);

		return $this->addFiltro($qb, $campos, $paginacion)->getResult();
	}

	public function getPaginador($campos, $paginacion) {
		$qb = $this->_em->createQueryBuilder();
		$qb->select('r')
		   ->from('Sistema\Entity\Rol', 'r')
		   ->where('r.nrolestado = :nrolestado')
		   ->orderBy('r.crolnombre', 'ASC')
		   ->setParameter('nrolestado', 1);

		$query = $this->addFiltro($qb, $campos, $paginacion);

		$adapter = new DoctrineAdapter(new ORMPaginator($query));
		$paginator = new Paginator($adapter);
		$paginator->setDefaultItemCountPerPage($paginacion['items']);
		$paginator->setCurrentPageNumber($paginacion['pagina']);

		return $paginator;
	}
}
