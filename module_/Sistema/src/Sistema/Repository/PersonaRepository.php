<?php

namespace Sistema\Repository;

use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;

/**
 * PersonaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonaRepository extends EntityRepository {
	public function buscar($campos, $paginacion) {
		$qb = $this->_em->createQueryBuilder();
		$qb->select('p')
		   ->from('Sistema\Entity\Persona', 'p')
		   ->where('p.nperestado != :eliminado')
		   ->andWhere('p.nperestado != :root')
		   ->orderBy('p.cperapellidos', 'ASC')
		   ->setParameter('eliminado', 0)
		   ->setParameter('root', 3);

		$query = $this->addFiltro($qb, $campos, $paginacion);

		return $query->getResult();
	}

	public function getPaginador($campos, $paginacion) {
		$qb = $this->_em->createQueryBuilder();
		$qb->select('p')
		   ->from('Sistema\Entity\Persona', 'p')
		   ->where('p.nperestado != :eliminado')
		   ->andWhere('p.nperestado != :root')
		   ->orderBy('p.cperapellidos', 'ASC')
		   ->setParameter('eliminado', 0)
		   ->setParameter('root', 3);

		$query = $this->addFiltro($qb, $campos, $paginacion);

		$adapter = new DoctrineAdapter(new ORMPaginator($query));
		$paginator = new Paginator($adapter);
		$paginator->setDefaultItemCountPerPage($paginacion['items']);
		$paginator->setCurrentPageNumber($paginacion['pagina']);

		return $paginator;
	}

	public function addFiltro($qb, $campos, $paginacion) {
		$expr = $qb->expr();

		if (count($campos) > 0) {
			$andX = $expr->andX();

			foreach ($campos as $key => $value) {
				if ($key == 'npercodigo') {
					$qb->andWhere('p.npercodigo = :npercodigo');
					$qb->setParameter($key, $value);

				} elseif ($key == 'dpernacimiento') {
					if ($value != '') {
						$qb->andWhere('p.dpernacimiento = :dpernacimiento');
						$qb->setParameter($key, $value);
					}

				} else {
					$qb->andWhere($expr->like('p.' . $key, ':' . $key));
					$qb->setParameter($key, '%' . $value . '%');
				}
			}

			$qb->andWhere($andX);
		}

		if ($paginacion) {
			$qb->setFirstResult($paginacion['inicio']);
			$qb->setMaxResults($paginacion['items']);
		}

		$query = $qb->getQuery();
		return $query;
	}

	public function buscarNoUsuarios($campos, $paginacion) {
		$qb = $this->_em->createQueryBuilder();
		$qb2 = $this->_em->createQueryBuilder();

		$dql2 = $qb2->select('COUNT(pe)')
		            ->from('Sistema\Entity\Persona', 'pe')
		            ->innerJoin('pe.perusuarios', 'pus')
		            ->where('pus.nperusuestado = :nperusuestado')
		            ->andWhere('pe.npercodigo = p.npercodigo')
		            ->getDQL();

		$qb->select('p')
		   ->from('Sistema\Entity\Persona', 'p')
		   ->leftJoin('p.perusuarios', 'pu')
		   ->where('p.nperestado != :eliminado')
		   ->andWhere('p.nperestado != :root')
		   ->andWhere('(' . $qb2 . ' ) = :cantidad')
		   ->orderBy('p.cperapellidos', 'ASC')
		   ->setParameter('cantidad', 0)
		   ->setParameter('eliminado', 0)
		   ->setParameter('root', 3)
		   ->setParameter('nperusuestado', 1);

		$query = $this->addFiltro($qb, $campos, $paginacion);

		return $query->getResult();
	}

	public function getPaginadorNoUsuarios($campos, $paginacion) {
		$qb = $this->_em->createQueryBuilder();
		$qb2 = $this->_em->createQueryBuilder();

		$dql2 = $qb2->select('COUNT(pe)')
		            ->from('Sistema\Entity\Persona', 'pe')
		            ->innerJoin('pe.perusuarios', 'pus')
		            ->where('pus.nperusuestado = :nperusuestado')
		            ->andWhere('pe.npercodigo = p.npercodigo')
		            ->getDQL();

		$qb->select('p')
		   ->from('Sistema\Entity\Persona', 'p')
		   ->leftJoin('p.perusuarios', 'pu')
		   ->where('p.nperestado != :eliminado')
		   ->andWhere('p.nperestado != :root')
		   ->andWhere('(' . $qb2 . ' ) = :cantidad')
		   ->orderBy('p.cperapellidos', 'ASC')
		   ->setParameter('cantidad', 0)
		   ->setParameter('eliminado', 0)
		   ->setParameter('root', 3)
		   ->setParameter('nperusuestado', 1);

		$query = $this->addFiltro($qb, $campos, $paginacion);

		$adapter = new DoctrineAdapter(new ORMPaginator($query));
		$paginator = new Paginator($adapter);
		$paginator->setDefaultItemCountPerPage($paginacion['items']);
		$paginator->setCurrentPageNumber($paginacion['pagina']);

		return $paginator;
	}
}
